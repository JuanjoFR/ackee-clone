"use client"

import * as d3 from "d3"
import * as React from "react"
import { subDays } from "date-fns"
import Bar from "./bar"

const today = new Date()
const data = [
  { id: "1", date: subDays(today, 13), value: 4 },
  { id: "2", date: subDays(today, 12), value: 6 },
  { id: "3", date: subDays(today, 11), value: 8 },
  { id: "4", date: subDays(today, 10), value: 7 },
  { id: "5", date: subDays(today, 9), value: 10 },
  { id: "6", date: subDays(today, 8), value: 12 },
  { id: "7", date: subDays(today, 7), value: 4 },
  { id: "8", date: subDays(today, 6), value: 14 },
  { id: "9", date: subDays(today, 5), value: 3 },
  { id: "10", date: subDays(today, 4), value: 6 },
  { id: "11", date: subDays(today, 3), value: 8 },
  { id: "12", date: subDays(today, 2), value: 13 },
  { id: "13", date: subDays(today, 1), value: 11 },
  { id: "14", date: today, value: 8 }
]

export default function BarChart() {
  // const xScale = d3
  //   .scaleTime()
  //   .domain([data[0].date, data[data.length - 1].date])
  //   .range([0, 100])
  const xScaleBand = d3
    .scaleBand()
    .domain(data.map((d, i) => (i + 1).toString())) // descending frequency
    // .range([marginLeft, width - marginRight])
    .range([0, 100])
  // .padding(0.3)
  // .paddingInner(0.3)
  const xScaleBandWithPadding = d3
    .scaleBand()
    .domain(data.map((d, i) => (i + 1).toString())) // descending frequency
    // .range([marginLeft, width - marginRight])
    .range([0, 100])
    .padding(0.3)
    .paddingOuter(0.15)
    .align(0.5)
  const yScale = d3
    .scaleLinear()
    .domain([0, d3.max(data.map((d) => d.value)) ?? 0])
    .range([100, 0])
  const [activeBar, setActiveBar] = React.useState(data[data.length - 1])

  // const line = d3
  //   .line<(typeof data)[number]>()
  //   .x((d) => xScale(d.date))
  //   .y((d) => yScale(d.value))

  // const d = line(data)

  // React.useEffect(() => {
  //   console.log("active bar changed", activeBar)
  // }, [activeBar])

  return (
    <div
      className="relative h-full w-full"
      style={
        {
          containerType: "inline-size",
          "--marginTop": "6px",
          "--marginRight": "0px",
          "--marginBottom": "6px",
          "--marginLeft": "30px"
        } as React.CSSProperties
      }
    >
      {/* <div
        // className={`absolute translate-y-[${Math.round(240.9999999999999)}px]`}
        className={`absolute`}
        style={{
          transform: `translate(${xScaleBand(activeBar.id)}px, ${yScale(
            activeBar.value
          )}px)`
        }}
        // className={`absolute translate-y-[${Math.round(
        //   yScale(activeBar.value)
        // )}px]`}
      >
        <div className="rounded-md bg-orange-500 px-2">o</div>
      </div> */}

      {/* X axis */}
      {/* <svg
        className="absolute inset-0
          h-[calc(100%-var(--marginTop))]
          w-[calc(100%-var(--marginLeft)-var(--marginRight))]
          translate-x-[var(--marginLeft)]
          translate-y-[var(--marginTop)]
          overflow-visible
        "
      >
        {data.map((day, i) => (
          <g key={i} className="overflow-visible font-medium text-gray-500">
            <text
              // x={`${xScale(day.date)}%`}
              x={`${xScaleBand((i + 1).toString())}%`}
              y="100%"
              textAnchor={
                i === 0 ? "start" : i === data.length - 1 ? "end" : "middle"
              }
              fill="currentColor"
              className="@sm:inline hidden text-sm"
            >
              {format(day.date, "EEE")}
            </text>
            <text
              // x={`${xScale(day.date)}%`}
              x={`${xScaleBand((i + 1).toString())}%`}
              y="100%"
              textAnchor={
                i === 0 ? "start" : i === data.length - 1 ? "end" : "middle"
              }
              fill="currentColor"
              className="@sm:hidden text-xs"
            >
              {format(day.date, "EEEEE")}
            </text>
          </g>
        ))}
      </svg> */}

      {/* Y axis */}
      <svg
        className="absolute inset-0
          h-[calc(100%-var(--marginTop)-var(--marginBottom))]
          translate-y-[var(--marginTop)]
          overflow-visible
        "
      >
        <g className="translate-x-5">
          {yScale
            .ticks(3)
            .map(yScale.tickFormat(3, "d"))
            .map((value, i) => (
              <text
                key={i}
                y={`${yScale(+value)}%`}
                alignmentBaseline="middle"
                textAnchor="end"
                className="text-sm tabular-nums text-[#999C9C]"
                fill="currentColor"
              >
                {value}
              </text>
            ))}
        </g>
      </svg>

      {/* Chart area */}
      <svg
        className="absolute inset-0
          h-[calc(100%-var(--marginTop)-var(--marginBottom))]
          w-[calc(100%-var(--marginLeft)-var(--marginRight))]
          translate-x-[var(--marginLeft)]
          translate-y-[var(--marginTop)]
          overflow-visible
        "
      >
        <svg
          viewBox="0 0 100 100"
          className="overflow-visible"
          preserveAspectRatio="none"
        >
          {/* Grid lines */}
          {yScale
            .ticks(3)
            .map(yScale.tickFormat(3, "d"))
            .map((active, i) => (
              <g
                transform={`translate(0,${yScale(+active)})`}
                className="text-[#3D4242]"
                key={i}
              >
                <line
                  x1={0}
                  x2={100}
                  stroke="currentColor"
                  // strokeDasharray="6,5"
                  strokeWidth={1}
                  vectorEffect="non-scaling-stroke"
                />
              </g>
            ))}

          {/* Line */}
          {/* <path
            d={d}
            fill="none"
            className="text-gray-600"
            stroke="currentColor"
            strokeWidth="2"
            vectorEffect="non-scaling-stroke"
          /> */}

          {/* Circles */}
          {/* {data.map((d) => (
            <path
              key={d.date.toString()}
              d={`M ${xScale(d.date)} ${yScale(d.value)} l 0.0001 0`}
              vectorEffect="non-scaling-stroke"
              strokeWidth="8"
              strokeLinecap="round"
              fill="none"
              stroke="currentColor"
              className="text-gray-400"
            />
          ))} */}
          {/* {data.map((d) => (
            <foreignObject
              key={d.id}
              x={xScaleBand(d.id)}
              y={yScale(d.value) - 10}
              width={xScaleBand.bandwidth()}
              height={100}
              vectorEffect="non-scaling-stroke"
            >
              <div className={`bg-red-500`}>
                <span>o</span>
              </div>
            </foreignObject>
          ))} */}

          {/* Bars */}
          {data.map((d) => (
            <Bar
              key={d.date.toString()}
              barElementWrapperProperties={{
                x: `${xScaleBand(d.id)}`,
                y: 0,
                width: xScaleBand.bandwidth(),
                height: 100
              }}
              barElementProperties={{
                // x={`${xScale(d.date)}`}
                // x={`${xScale(d.date) - barWidth / 2}`}
                // x={`${xScaleBand(d.id)}`}
                x: `${xScaleBandWithPadding(d.id)}`,
                // y={yScale(d.value)}
                y: yScale(d.value),
                // width={barWidth}
                // width={xScaleBand.bandwidth()}
                width: xScaleBandWithPadding.bandwidth(),
                // height={yScale(d.value)}
                // height={100 - yScale(d.value)}
                height: 100 - yScale(d.value)
              }}
              onMouseOver={() => {
                if (d.id !== activeBar.id) {
                  setActiveBar(d)
                }
              }}
              onMouseOut={() => {
                const defaultItem = data[data.length - 1]
                if (d.id !== defaultItem.id) {
                  setActiveBar(defaultItem)
                }
              }}
              isActive={activeBar.id === d.id}
              // vectorEffect="non-scaling-stroke"
              // className="text-[#6e7373]"
              // fill="currentColor"
            />
          ))}
        </svg>
      </svg>

      {/* <div
        className="relative inset-0
          h-[calc(100%-var(--marginTop)-var(--marginBottom))]
          w-[calc(100%-var(--marginLeft)-var(--marginRight))]
          translate-x-[var(--marginLeft)]
          translate-y-[var(--marginTop)]
          overflow-visible
          bg-blue-300
        "
      >
        <div className="relative left-0 top-0 h-[100px] w-full bg-orange-300">
          <div
            className="absolute h-4 w-4 bg-gray-100"
            style={{
              transform: `translate(${100}%, ${0}px)`
            }}
          />
        </div>
      </div> */}
    </div>
  )
}
